;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; préfixe : red-team
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



to red-team-go-back-to-base
  if (carrying-food? > 1000) or (energy < 500) or ((Breed = RocketLaunchers) and (nb-missiles = 0))
  [
    let b min-one-of my-bases [ distance myself ]
    if (b != nobody) [
      ifelse (distance b <= 2)
      [ 
        if (carrying-food? > 1000) [ give-food b carrying-food? ]
        ;if (energy < 500) [ red-team-ask-for-energy b 500 ]
        if ((Breed = RocketLaunchers) and (nb-missiles = 0)) [
          VPOP-ask-for-energy 500
          new-missile 5
        ]
      ]
      [
        set heading   b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
    ]    
  ]
end

to red-team-go-and-eat
  if ((breed = RocketLaunchers and (mem5 = 0)) or (breed = Explorers)) [
    random-move
  ]
end

to red-team-harvesters-go-and-eat
  let b min-one-of perceive-food [ distance self ]
  ifelse (b != nobody) [ 
    ifelse (distance b) <= 2
      [ take-food b ]
    [ set heading towards b - 20 + random 40
      if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
      forward-move speed
    ]
  ]
  [ random-move ]
end

to-report red-team-no-target?
  report mem5 = 0
end

to red-team-set-target [ x y espece ]
  set mem0 x set mem1 y set mem2 espece set mem5 1
end

to red-team-call-rocket-launcher [ x y espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy x y ]
  if (rl != nobody) [ ask rl [ red-team-set-target x y espece ]]
end

to red-team-call-explorer [ x y espece ]
  let ex one-of perceive-specific-robots color Explorers
  if (ex != nobody) [
    ask ex [
      set mem0 x 
      set mem1 y
      set mem2 espece
      set mem5 1
    ]
  ]
end


to red-team-select-target
  if (red-team-no-target?)
  [
    let h min-one-of perceive-robots ennemy [ distance myself ]
    ifelse ( h != nobody ) [
      set mem0 [xcor] of h
      set mem1 [ycor] of h
      set mem2 [breed] of h
      set mem5 1
    ]
    [ set mem5 0 ]
  ]
end

to red-team-shoot 
  if (not red-team-no-target?) 
  [
    ifelse (distancexy mem0 mem1 < detection-range)
    [ launch-rocket towardsxy mem0 mem1 set mem5 0]
    [ set heading towardsxy mem0 mem1 - 20 + random 40
      if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
      forward-move speed
    ]
  ]
  
end






















to VPOP-go-toward[target-to-go-to]
  set heading towards target-to-go-to
  VPOP-forward-move speed
end

to VPOP-go-towardxy[cord-to-go-to]
  set heading towardsxy item 0 cord-to-go-to item 1 cord-to-go-to
  VPOP-forward-move speed
end


to VPOP-forward-move[movingSpeed]
  let try 0
  while[try < 10 and free-ahead? movingSpeed != nobody][
    rt random 180
    set try try + 1
  ]
  if (free-ahead? movingSpeed = nobody) [forward-move movingSpeed]
end

to VPOP-ask-for-energy [ n ]
  if (n > 0)[
    ask VPOP-closest-base [ if (energy > 6000) [ give-energy myself n ]]]
end

to-report VPOP-has-arrived[targetCoord radius]  
  ifelse (sqrt((xcor - item 0 targetCoord)^ 2 + (ycor - item 1 targetCoord)^ 2) < radius)
  [
    report true
  ]
  [
    report false
  ]
end

to-report VPOP-closest-base
  report min-one-of my-bases [ distance myself ]
end









to goRedExplorer                      ;mem0 : coord du tas trouvé, mem1 : coord de la base adv trouvée, mem2 : les coordonnées de l'harvester à aider, ___ , mem5[0] : état, mem5[1] : priorité (0: tas, 1 : base adv, 2 : help)
                                      ;red-team-go-back-to-base
                                      ;red-team-go-and-eat
  
  ;ifelse (not red-team-no-target?) [
  ;  red-team-call-rocket-launcher mem0 mem1 mem2
  ;  red-team-call-explorer mem0 mem1 mem2
  ;]
  ;[ let h one-of perceive-robots ennemy
  ;  if ( h != nobody ) [ red-team-call-rocket-launcher [xcor] of h [ycor] of h [breed] of h]
  ;]
  if (distance VPOP-closest-base < 0.2)[
    VPOP-forward-move speed]
    
  
  
  (ifelse
    item 0 mem5 = 0 [      
      ;SEARCH : se balade en ligne droite jusqu'à trouver une base adv, un tas ou retourner à la base          
      ;s'il voit un harvester qui porte plus de 5 burgers, passe en état d'aide
      
      ;s'il voit + de 5 burgers en meme temps, en prend un au hasard et le désigne comme tas
      ;s'il voit une base adv, enregistre ses coord       
      
      ;check s'il a des coordonnées pour sa priorité -> si oui passe en état de report
      let harvesters-perceived perceive-specific-robots color harvesters
      let harvester-perceived one-of harvesters-perceived with [mem0 > 1000]
      if (harvester-perceived != nobody)[
        set mem2 harvester-perceived]
      ;      if (harvesters-perceived != nobody)[
      ;      foreach (harvesters-perceived) [harvesterPerceived ->
      ;        if ([mem0] of harvesterPerceived > 4)[    
      ;          
      ;        ]]
      ;      ]      
      
      
      
      
      VPOP-forward-move speed
      
      if (count perceive-food > 4)[
        let burgerPerceived one-of perceive-food
        set mem0 replace-item 0 mem0 ([xcor] of burgerPerceived)
        set mem0 replace-item 1 mem0 ([ycor] of burgerPerceived)
      ]
      
      let baseAdv one-of perceive-specific-robots ennemy bases
      if (baseAdv != nobody) [
        set mem1 replace-item 0 mem1 ([xcor] of baseAdv)
        set mem1 replace-item 1 mem1 ([ycor] of baseAdv)    
      ]
      
      (ifelse
        item 1 mem5 = 0 [
          if (item 0 mem0 != -1)[
            set mem5 replace-item 0 mem5 2              ; on a un tas et c'est notre prio -> on report
          ]
        ]
        item 1 mem5 = 1 [
          if (item 0 mem1 != -1)[
            set mem5 replace-item 0 mem5 2              ; on a une base adv et c'est notre prio -> on report
          ]                  
      ])
      
      if (item 0 mem5 != 2 and mem2 != -1)[           ; on n'a pas report ce tick et on a un harvester à aller aider
        set mem5 replace-item 0 mem5 1        
      ]      
    ]
    item 0 mem5 = 1 [  
      ;HELP : va vers l'harvester qu'il a vu
      ;quand a reçu de la nourriture retourne à la base
      
      ifelse ((distance mem2 <= detection-range) and ([mem0] of mem2 > 1000))[ ; on vérifies qu'on voit toujour le harvester et qu'il a toujours besoin d'aide
        VPOP-go-toward mem2
      ]
      [
        set mem2 -1
        ifelse (carrying-food? > 0) [
          set mem5 replace-item 0 mem5 2 ; on a des burgers sur nous -> Retour à la base
        ] [
          set mem5 replace-item 0 mem5 0 ; on n'a pas de burger sur nous -> Retour à la recherche (si on est en help c'est qu'on a rien de prioritaire à report à la base)          
        ]        
      ]
    ]
    item 0 mem5 = 2 [
      ;REPORT : retourne à la base
      ; si voit un harvester et qu'il a les coordonnées d'un tas lui transmet
      ; si sa prio est le tas alors il repart en search sauf s'il doit rentrer prendre de l'énergie, sinon il rentre dans tous les cas
      ; quand voit la base lui envoie les coordonnées => base adv : mem1; tas : mem2 => si sa prio était de trouver une base et qu'il en avait une il se met en prio sur l'aide d'harvester
      
      set mem2 -1   ; Si on avait vu un harvester demandant de l'aide on l'oublie
      if (distance VPOP-closest-base > 2)[
        VPOP-go-toward VPOP-closest-base]
      if (item 0 mem0 != -1) [     ;Si on a un tas en mémoire on regarde si on croise
        let harvesterPerceived one-of perceive-specific-robots color harvesters with [mem1 = -1]
        let transmit 0
        while[harvesterPerceived != nobody][
          set transmit 1
          let infoTas mem0
          ask harvesterPerceived [set mem1 infoTas]
          set harvesterPerceived one-of perceive-specific-robots color harvesters with [mem1 = -1]
        ]
        if (item 1 mem5 = 0 and transmit = 1)[                         ; la priorité du robot est le tas
          set mem0 [-1 -1]                              ; l'info du tas a été transmise => on l'oublie            
          if (energy >= 500)[   ; si l'énergie est suffisante on repart à la recherche de d'un tas
            rt 360 - random 180 ; avant de repartir on se tourne dans une direction aléatoire
            set mem5 replace-item 0 mem5 0  
          ]
        ]
      ]
      
      
      let basePerceived one-of perceive-specific-robots color bases
      if (basePerceived != nobody)[
        set mem5 replace-item 0 mem5 3
        ;on transmet les infos à la base
        let infoTas mem0
        if (infoTas != [-1 -1])[
          ask basePerceived [set mem0 infoTas]
          set mem0 [-1 -1]
        ]
        let infoBase mem1
        if(infoBase != [-1 -1])[
          ask basePerceived [set mem1 infoBase]
          set mem1 [-1 -1]]
      ]
    ]
    item 0 mem5 = 3 [
      ;IDDLE : on attend d'avoir assez d'énergie pour repartir
      ifelse (energy < 500 or carrying-food? > 0)[
        ifelse (distance VPOP-closest-base > 2)
        [VPOP-go-toward VPOP-closest-base]
        [give-food VPOP-closest-base carrying-food?
          VPOP-ask-for-energy 1000 - energy]
      ]
      [
        set mem5 replace-item 0 mem5 0]     
  ])  
  
  ; ====== A FAIRE QUELQUE SOIT L'ETAT ======
  ; Si il n'y a plus d'énergie, il faut rentrer
  if (energy < 500) [
    if (item 0 mem5 != 3)[
      set mem5 replace-item 0 mem5 2]
  ]
  ; Si il voit un autre explorer qui n'a pas de coord de tas ou de base alors que this en a alors on lui transmet
  
end



to goRedRocketLauncher
  ifelse (energy < 1000) or (mem3 = -1)
  [
    ifelse (distance VPOP-closest-base > 2)
    [VPOP-go-toward VPOP-closest-base
      set mem1 -1]
    [VPOP-ask-for-energy 4000 - energy]
  ]
  [
    ifelse(mem1 != -1) and (mem1 != -2)[
      VPOP-chaaarge
    ]
    [
      VPOP-select-target-fire-and-chase
      VPOP-defend
    ]
  ]
  
  ;; crée un nouveau missile si plus de 1000 unités d'énergie
  if ((energy > 1000) and (nb-missiles < 5)) [ new-missile 1 ]
end

to VPOP-defend
  
  let b min-one-of my-bases [ distance myself ]
  if (b != nobody) [
    set heading towards b
    ifelse (distance b < 7)[rt 180]
    [if (distance b < 9)[rt 90]]
    VPOP-forward-move speed
  ]
end

to VPOP-chaaarge
  
  let eBase mem1
  ;verifie que la base existe encore
;  if (distance eBase < 5)[
;    let tBase perceive-base ennemy
;    if (tBase = nobody)[
;      set mem3 -1]]
  
  ;;Tourne autour de la base en tirant
  set heading towardsxy item 0 eBase item 1 eBase
  if (VPOP-has-arrived eBase 10)[
    launch-rocket towardsxy item 0 eBase item 1 eBase
    rt 90]
  if (VPOP-has-arrived eBase 5)[rt 90]
  VPOP-forward-move speed  
  
end


to VPOP-select-target-fire-and-chase
  
  let t min-one-of perceive-specific-robots ennemy RocketLaunchers [distance myself];;Cherche d'abord les RL ennemis (le plus proche)
  if (t != nobody)[
    launch-faf t ;;si on a un faf, on tire un faf
    launch-rocket towardsxy ([xcor] of t) ([ycor] of t);;sinon on tire un missile
    VPOP-go-toward t]
  
end 

to goRedHarvester
  ;;red-team-go-back-to-base
  ;;red-team-harvesters-go-and-eat
  
  (ifelse
    item 0 mem5 = 0 [   ;Etat dans lequel l'harvester va chercher de la nourriture
      (ifelse
        item 1 mem5 = 0 [ 
          ;WANDER : se balade aléatoirement
          ;si a des coordonnées d'un tas -> passe à l'état de go vers le tas
          ;sinon si voit un burger passe à l'état de récolte
          let burg one-of perceive-food
          if (burg != nobody) [
            
            VPOP-go-toward burg
            set mem5 replace-item 1 mem5 2
            ;VPOP-replaceElement mem5 1 2 ;Passe directement à l'état de récolte car burger à portée : pas besoin de se déplacer
            set mem2 60 ;180 est la durée pendant laquelle il va chercher de la nourriture en mode récolte
          ]
          ifelse(distance VPOP-closest-base < 35)
          [random-move]
          [VPOP-go-toward VPOP-closest-base]
          if (item 0 mem1 != -1) [
            set mem5 replace-item 1 mem5 1
          ]      
        ]
        item 1 mem5 = 1 [   
          ;GO-TO-BURGER : avance vers les coordonnées qu'il a enregistré
          VPOP-go-towardxy mem1
          ;si arrivé aux coordonnées : passe en etat de récolte
          if (VPOP-has-arrived mem1 2)[
            set mem1 [-1 -1]  ;on oublie le tas
            set mem2 60
            set mem5 replace-item 1 mem5 2
          ]
        ]
        item 1 mem5 = 2 [  
          ;;Recupere tout les burgers a portée
          let burgerPerceived min-one-of perceive-food [ distance myself ]
          while [(burgerPerceived != nobody) and (distance burgerPerceived <= 2)] [
            take-food burgerPerceived
            set burgerPerceived min-one-of perceive-food [ distance myself ]
            set mem2 60
          ]
          ;;Se dirige vers un autre burger et recupere tout les burgers a portée
          if (burgerPerceived != nobody)[ 
            VPOP-go-toward burgerPerceived
            while [(burgerPerceived != nobody) and (distance burgerPerceived <= 2)] [
              take-food burgerPerceived
              set burgerPerceived min-one-of perceive-food [ distance myself ]
              set mem2 60
          ]]
          
          random-move
          set mem2 (mem2 - 1)
          if (mem2 < 0)[
            set mem5 [1 0]
          ]
          ;RECOLTE : pendant x tick wander autour des coord du tas et récolte ce qu'il voit
          ;si il a récupéré un nouveau burger on reset le timer
          ;à la fin du timer on passe à l'état retour de base          
      ])
    ]
    item 0 mem5 = 1 [   ;Etat dans lequel l'harvester va retourner à la base
                        ; se dirige vers la base, quand voit la base passe à l'état suivant
                        ; si la distance à la base est < ??? planter un burger avant d'avancer
                        ; si voit un explorer et que l'harvester carry > ?, donner le surplus à l'explorer
      let closest-base VPOP-closest-base
      VPOP-go-toward closest-base
      if (distance closest-base < 10) [
        VPOP-ask-for-energy 1700
        plant-seeds color max-seeds 
      ]
      if (carrying-food? > 0) [
        let basePerceived one-of perceive-specific-robots color bases
        if (basePerceived != nobody) [
          give-food basePerceived carrying-food?
        ]
      ] 
      if (carrying-food? < 1)[
        set mem5 replace-item 0 mem5 0
      ]  
  ])
  
  
  ; ====== A FAIRE QUELQUE SOIT L'ETAT ======
  
  if (carrying-food? > 1000) [ ; 5 designe la quantité de burgers que l'harvester va garder pour pouvoir les planter
    let explorerPerceived one-of perceive-specific-robots color explorers
    if (explorerPerceived != nobody) [
      give-food explorerPerceived (carrying-food? - 1000)
    ]
  ]   
  
  ;si il y a un wall devant le recupérer
  let wallPerceived one-of perceive-walls
  if (wallPerceived != nobody)[
    take-wall wallPerceived
  ]
  if (energy < 500) [
    set mem5 replace-item 0 mem5 1
  ]
  
  ;on expose la quantité de burgers portés
  set mem0 carrying-food?
end

to goRedBase
  ;set label energy
  
  ;;Transmet l'info de tas à un harvester
  let infoTas mem0
  if (infoTas != [-1 -1])[
    let t one-of perceive-specific-robots color harvesters
    ifelse (t != nobody)[
      ask t [set mem1 infoTas]
      set mem0 [-1 -1]]
    [if (energy > 5000)[
      new-Harvester self
      let t2 one-of perceive-specific-robots color harvesters
      ask t2 [set mem1 infoTas]
      set mem0 [-1 -1]
  ]]]
  
  ;;Transmet l'info de base ennemie aux RL
;  let infoBase mem1
;  if (infoBase != [-1 -1])[
;    set mem7 3;; !!! Cette ligne force la base a ne produire QUE des RL dès qu'on a les coordonées de la base ennemie (passage en mode attaque) !!!  
;    let RocketLaunchersPerceived perceive-specific-robots color rocketlaunchers 
;    set RocketLaunchersPerceived RocketLaunchersPerceived with [mem1 = -1]
;    let RocketLauncherPerceived one-of RocketLaunchersPerceived
;    while[RocketLauncherPerceived != nobody][
;      ask RocketLauncherPerceived [set mem1 infoBase]
;      set RocketLaunchersPerceived perceive-specific-robots color rocketlaunchers 
;      set RocketLaunchersPerceived RocketLaunchersPerceived with [mem1 = -1]
;      set RocketLauncherPerceived one-of RocketLaunchersPerceived
;  ]]
;  
  
  
  
  ;;Créé les robots 1 par 1
  if (mem6 > 0) and (energy > 15000) [
    ifelse(one-of perceive-specific-robots color rocketlaunchers != nobody)[
      (ifelse
        mem7 < 2 [;; nombre de harvester par RL/explo
          new-Harvester self
        ]
        mem7 = 2 [  
          new-Explorer self
        ]
        mem7 = 3 [      
          new-RocketLauncher self
          set mem6 mem6 - 1
          set mem7 0 ])
      set mem7 mem7 + 1 ]
    [;Si il n'y a pas de RL en defense, on en créé un qui restera en def
      new-RocketLauncher self
      ask one-of perceive-specific-robots color rocketlaunchers [set mem1 -2]]
  ]
  
  if (nb-missiles < 10) and (energy > 1000) [ new-missile 50 ]
  if (nb-fafs < 10) and (energy > 1000) [ new-faf 10 ]
  
  
  ;;Tire sur les ennemis proches
  let t one-of perceive-robots ennemy
  if (t != nobody) [
    ;; regarde s'il y a des alliés en direction de la cible potentielle t avant de tirer
    if (not any? perceive-robots-in-cone color towards t) [ launch-faf t ]
  ]
  
end

;; procedure pour initialiser les explorers rouges
to initRedExplorer
  set mem0 [-1 -1]
  set mem1 [-1 -1]
  set mem2 -1
  set mem3 -1
  set mem5 [0 0]
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
  set mem1 -1; -1 -> en attente d'ordre; -2 -> toujours en defense; [x y] -> coordonées de la base ennemie
  set mem3 0 ;retour a la base après attaque
  set mem5 -1; Cible
end

;; procedure pour initialiser les harvesters rouges
to initRedHarvester
  set mem1 [-1 -1]
  set mem5 [0 0]
end

;; procedure pour initialiser les bases rouges
to initRedBase
  set mem0 [-1 -1] ;coordonées d'un tas
  set mem1 [-1 -1] ;coordonées de la base ennemie
  set mem6 99 ;nombre d'harvesters a produire ? a suprimer
  set mem7 0 ;ordre de production des robots (0,1 -> Harvester; 2 -> Explorer; 3 -> RocketLauncher)
end
