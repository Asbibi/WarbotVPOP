;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; préfixe : red-team
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to red-team-ask-for-energy [ b n ]
  ask b [ if (energy > 6000) [ give-energy myself n ]]
end

to red-team-go-back-to-base
  if (carrying-food? > 1000) or (energy < 500) or ((Breed = RocketLaunchers) and (nb-missiles = 0))
  [
    let b min-one-of my-bases [ distance myself ]
    if (b != nobody) [
      ifelse (distance b <= 2)
      [ 
        if (carrying-food? > 1000) [ give-food b carrying-food? ]
        if (energy < 500) [ red-team-ask-for-energy b 500 ]
        if ((Breed = RocketLaunchers) and (nb-missiles = 0)) [
          red-team-ask-for-energy b 500
          new-missile 5
        ]
      ]
      [
        set heading   b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
    ]    
  ]
end

to red-team-go-and-eat
  if ((breed = RocketLaunchers and (mem5 = 0)) or (breed = Explorers)) [
    random-move
  ]
end

to red-team-harvesters-go-and-eat
  let b min-one-of perceive-food [ distance self ]
  ifelse (b != nobody) [ 
    ifelse (distance b) <= 2
      [ take-food b ]
      [ set heading towards b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
  ]
  [ random-move ]
end

to-report red-team-no-target?
  report mem5 = 0
end

to red-team-set-target [ x y espece ]
  set mem0 x set mem1 y set mem2 espece set mem5 1
end

to red-team-call-rocket-launcher [ x y espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy x y ]
  if (rl != nobody) [ ask rl [ red-team-set-target x y espece ]]
end

to red-team-call-explorer [ x y espece ]
  let ex one-of perceive-specific-robots color Explorers
  if (ex != nobody) [
    ask ex [
      set mem0 x 
      set mem1 y
      set mem2 espece
      set mem5 1
    ]
  ]
end

to red-team-select-target
  if (red-team-no-target?)
  [
    let h min-one-of perceive-robots ennemy [ distance myself ]
    ifelse ( h != nobody ) [
      set mem0 [xcor] of h
      set mem1 [ycor] of h
      set mem2 [breed] of h
      set mem5 1
    ]
    [ set mem5 0 ]
  ]
end

to red-team-shoot 
  if (not red-team-no-target?) 
  [
    ifelse (distancexy mem0 mem1 < detection-range)
    [ launch-rocket towardsxy mem0 mem1 set mem5 0]
    [ set heading towardsxy mem0 mem1 - 20 + random 40
      if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
      forward-move speed
    ]
  ]
  
end






















to VPOP-go-toward[cord-to-go-to]
  set heading towards cord-to-go-to
  VPOP-foward-move speed
end

to VPOP-foward-move[movingSpeed]
  forward-move movingSpeed
end

to VPOP-replaceElement[inList index newElement]  
  set inList replace-item index inList (newElement)
end

to-report VPOP-is-arrived[targetCoord radius]  
  ifelse (abs(abs xcor - abs item 0 targetCoord) < radius)
  [
    ifelse (abs(abs ycor - abs item 1 targetCoord) < radius)
    [
      report true
    ]
    [
      report false
    ]
  ]
  [
    report false
  ]
end

to-report VPOP-closest-base
  report min-one-of my-bases [ distance myself ]
end
  








to goRedExplorer                      ;mem0 : coord du tas trouvé, mem1 : coord de la base adv trouvée, mem2 : les coordonnées de l'harvester à aider, ___ , mem5[0] : état, mem5[1] : priorité (0: tas, 1 : base adv, 2 : help)
                                      ;red-team-go-back-to-base
                                      ;red-team-go-and-eat
  
  ;ifelse (not red-team-no-target?) [
  ;  red-team-call-rocket-launcher mem0 mem1 mem2
  ;  red-team-call-explorer mem0 mem1 mem2
  ;]
  ;[ let h one-of perceive-robots ennemy
  ;  if ( h != nobody ) [ red-team-call-rocket-launcher [xcor] of h [ycor] of h [breed] of h]
  ;]
  
  
  (ifelse
    item 0 mem5 = 0 [      
      ;SEARCH : se balade en ligne droite jusqu'à trouver une base adv, un tas ou retourner à la base          
      ;s'il voit un harvester qui porte plus de 5 burgers, passe en état d'aide
      
      ;s'il voit + de 5 burgers en meme temps, en prend un au hasard et le désigne comme tas
      ;s'il voit une base adv, enregistre ses coord       
      
      ;check s'il a des coordonnées pour sa priorité -> si oui passe en état de report
      
      foreach (perceive-specific-robots color harvesters) [harvesterPerceived ->
        if ([mem0] of harvesterPerceived > 4)[    
          set mem2 harvesterPerceived
        ]
      ]
      
      
      
      VPOP-foward-move speed
      
      if (length perceive-food > 4)[
        let burgerPerceived one-of perceive-food
        VPOP-replaceElement mem0 0 ([xcor] of burgerPerceived)
        VPOP-replaceElement mem0 1 ([ycor] of burgerPerceived)
      ]
      
      let baseAdv one-of perceive-specific-robots ennemy bases
      if (baseAdv != nobody) [
        VPOP-replaceElement mem1 0 ([xcor] of baseAdv)
        VPOP-replaceElement mem1 1 ([ycor] of baseAdv)        
      ]
      
      (ifelse
        item 1 mem5 = 0 [
          if (item 0 mem0 != -1)[
            VPOP-replaceElement mem5 0 2              ; on a un tas et c'est notre prio -> on report
          ]
        ]
        item 1 mem5 = 1 [
          if (item 0 mem1 != -1)[
            VPOP-replaceElement mem5 0 2              ; on a une base adv et c'est notre prio -> on report
          ]                  
      ])
      
      if (item 0 mem5 != 2 and mem2 != -1)[           ; on n'a pas report ce tick et on a un harvester à aller aider
        VPOP-replaceElement mem5 0 1        
      ]      
    ]
    item 0 mem5 = 1 [  
      ;HELP : va vers l'harvester qu'il a vu
      ;quand a reçu de la nourriture retourne à la base
      
      ifelse ((distance mem2 <= detection-range) and ([mem0] of mem2 > 4))[ ; on vérifies qu'on voit toujour le harvester et qu'il a toujours besoin d'aide
        VPOP-go-toward mem2
      ]
      [
        set mem2 -1
        ifelse (carrying-food? > 0) [
          VPOP-replaceElement mem5 0 2 ; on a des burgers sur nous -> Retour à la base
        ] [
          VPOP-replaceElement mem5 0 0 ; on n'a pas de burger sur nous -> Retour à la recherche (si on est en help c'est qu'on a rien de prioritaire à report à la base)          
        ]        
      ]
    ]
    item 0 mem5 = 2 [
      ;REPORT : retourne à la base
      ; si voit un harvester et qu'il a les coordonnées d'un tas lui transmet
      ; si sa prio est le tas alors il repart en search sauf s'il doit rentrer prendre de l'énergie, sinon il rentre dans tous les cas
      ; quand voit la base lui envoie les coordonnées => base adv : mem1; tas : mem2 => si sa prio était de trouver une base et qu'il en avait une il se met en prio sur l'aide d'harvester
      
      set mem2 -1   ; Si on avait vu un harvester demandant de l'aide on l'oublie
      VPOP-go-toward VPOP-closest-base
      if (item 0 mem0 != -1) [     ;Si on a un tas en mémoire on regarde si on croise 
        if (length perceive-specific-robots color harvesters > 4)[
          foreach (perceive-specific-robots color harvesters) [harvesterPerceived ->
            let infoTas mem0
            ask harvesterPerceived [set mem1 infoTas]
          ]
          if (item 1 mem5 = 0)[                         ; la priorité du robot est le tas
            set mem0 -1                                 ; l'info du tas a été transmise => on l'oublie            
            if (energy >= 500)[   ; si l'énergie est suffisante on repart à la recherche de d'un tas
              rt random 360 ; avant de repartir on se tourne dans une direction aléatoire
              VPOP-replaceElement mem5 0 0  
            ]
          ]
        ]
      ]
      
      let basePerceived one-of perceive-specific-robots color bases
      if (basePerceived != nobody)[
        ;TODO : transmettre les info à la base
        let infoTas mem0
        ask basePerceived [set mem0 infoTas]
        let infoBase mem1
        ask basePerceived [set mem1 infoBase]
        
        VPOP-replaceElement mem5 0 3  
      ]
    ]
    item 0 mem5 = 3 [
      ;IDDLE : on attend d'avoir assez d'énergie pour repartir
      if (energy > 999)[
        VPOP-replaceElement mem5 0 0
      ]      
  ])  
  
  ; ====== A FAIRE QUELQUE SOIT L'ETAT ======
  ; Si il n'y a plus d'énergie, il faut rentrer
  if (energy < 500) [
    VPOP-replaceElement mem5 0 2  
  ]
  ; Si il voit un autre explorer qui n'a pas de coord de tas ou de base alors que this en a alors on lui transmet
  
end



to goRedRocketLauncher
  red-team-go-back-to-base
  red-team-select-target
  red-team-shoot
  red-team-go-and-eat

  if ((energy > 3000) and (nb-missiles < 5)) [ new-missile 1 ]
end

to goRedHarvester                               ;mem0 : carryingFood?, pour pouvoir l'exposer aux autres robots ;mem1 : coord du tas à aller cherher, ___ , mem5[0] : état, mem5[1] : sous-état
  ;;red-team-go-back-to-base
  ;;red-team-harvesters-go-and-eat
  
  (ifelse
    item 0 mem5 = 0 [   ;Etat dans lequel l'harvester va chercher de la nourriture
      (ifelse
        item 1 mem5 = 0 [ 
          ;WANDER : se balade aléatoirement
          ;si a des coordonnées d'un tas -> passe à l'état de go vers le tas
          ;sinon si voit un burger passe à l'état de récolte
          ;set mem2 replace-item 0 mem2 (1)
          random-move
          ;[xcor] of h
          let burg one-of perceive-food
          if (burg != nobody) [
            ;set mem1 replace-item 0 mem1 ([xcor] of burg)    
            ;VPOP-replaceElement mem1 0 ([xcor] of burg)
            ;VPOP-replaceElement mem1 1 ([ycor] of burg)
            VPOP-replaceElement mem5 1 2 ;Passe directement à l'état de récolte car burger à portée : pas besoin de se déplacer
            set mem2 180 ;180 est la durée pendant laquelle il va chercher de la nourriture en mode récolte
          ]
          if (item 0 mem1 != -1) [
            VPOP-replaceElement mem5 1 1
          ]      
        ]
        item 1 mem5 = 1 [   
          ;GO-TO-BURGER : avance vers les coordonnées qu'il a enregistré
          VPOP-go-toward mem1
          ;si arrivé aux coordonnées : passe en etat de récolte
          if (VPOP-is-arrived mem1 2)[
            set mem1 [-1 -1]  ;on oublie le tas
            set mem2 180
            VPOP-replaceElement mem5 1 2
          ]
        ]
        item 1 mem5 = 2 [  
          foreach perceive-food [burgerPerceived ->
            take-food burgerPerceived
            set mem2 180          
          ]
          random-move
          set mem2 (mem2 - 1)
          if (mem2 < 0)[
            set mem5 [1 0]
          ]
          ;RECOLTE : pendant x tick wander autour des coord du tas et récolte ce qu'il voit
          ;si il a récupéré un nouveau burger on reset le timer
          ;à la fin du timer on passe à l'état retour de base          
      ])
    ]
    item 0 mem5 = 1 [   ;Etat dans lequel l'harvester va retourner à la base
                        ; se dirige vers la base, quand voit la base passe à l'état suivant
                        ; si la distance à la base est < ??? planter un burger avant d'avancer
                        ; si voit un explorer et que l'harvester carry > ?, donner le surplus à l'explorer
      let closest-base VPOP-closest-base
      VPOP-go-toward closest-base
      if (VPOP-is-arrived closest-base 10) [
        plant-seeds color max-seeds 
      ]
      if (carrying-food? > 5) [ ; 5 designe la quantité de burgers que l'harvester va garder pour pouvoir les planter
        let explorerPerceived one-of perceive-specific-robots color explorers
        if (explorerPerceived != nobody) [
          give-food explorerPerceived (carrying-food? - 5)
        ]
      ]   
      if (carrying-food? > 0) [
        let basePerceived one-of perceive-specific-robots color bases
        if (basePerceived != nobody) [
          give-food basePerceived (carrying-food?)
          VPOP-replaceElement mem5 0 0
        ]
      ]   
  ])
  
  
  ; ====== A FAIRE QUELQUE SOIT L'ETAT ======
  
  ;si il y a un wall devant le recupérer
  let wallPerceived one-of perceive-walls
  if (wallPerceived != nobody)[
    take-wall wallPerceived
  ]
  if (energy < 500) [
    VPOP-replaceElement mem5 0 1    
  ]
  
  ;on expose la quantité de burgers portés
  set mem0 carrying-food?
end

to goRedBase
  set label energy
  if (energy > 12000) [ new-RocketLauncher self ]
  let t one-of perceive-specific-robots ennemy rocketlaunchers
  if (t != nobody) [
    launch-rocket towards t
  ]
end

;; procedure pour initialiser les explorers rouges
to initRedExplorer
  set mem0 [-1 -1]
  set mem1 [-1 -1]
  set mem3 -1
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
end

;; procedure pour initialiser les harvesters rouges
to initRedHarvester
end

;; procedure pour initialiser les bases rouges
to initRedBase
end
