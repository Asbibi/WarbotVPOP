;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; préfixe : red-team
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



; Méthode permettant d'aller vers un burger/robot en evitant les obstacles
to VPOP-go-toward[target-to-go-to]
  set heading towards target-to-go-to
  VPOP-forward-move speed
end

; Méthode permettant d'aller vers des coordonnées en evitant les obstacles
to VPOP-go-towardxy[cord-to-go-to]
  set heading towardsxy item 0 cord-to-go-to item 1 cord-to-go-to
  VPOP-forward-move speed
end

; Méthode permettant d'aller tout en droit sauf s'il faut eviter un obstacle
to VPOP-forward-move[movingSpeed]
  ; On tente 10 fois de trouver une orientation selon laquelle le déplacement est possible avec une rotation aléatoire, puis on le tente
  let try 0
  while[try < 10 and free-ahead? movingSpeed != nobody][
    rt random 180
    set try try + 1
  ]
  ; On vérifies quand même que le déplacement est bien possible au final pour éviter les collisions
  if (free-ahead? movingSpeed = nobody) [forward-move movingSpeed] 
end

; Méthode permettant de demander de l'énergie à la base la plus proche
to VPOP-ask-for-energy [ n ]
  if (n > 0)[
    ask VPOP-closest-base [ if (energy > 6000) [ give-energy myself n ]]]
end

; Méthode renvoyant si l'agent est à moins de radius des coordonnées (similaire à distance agent <= radius)
to-report VPOP-has-arrived[targetCoord radius]  
  ifelse (sqrt((xcor - item 0 targetCoord)^ 2 + (ycor - item 1 targetCoord)^ 2) < radius)
  [
    report true
  ]
  [
    report false
  ]
end

; Méthode renvoyant une référence vers la base la plus proche
to-report VPOP-closest-base
  report min-one-of my-bases [ distance myself ]
end

; Méthode donnant les instructions nécessaires à la défense de la base par les rocketLaunchers
to VPOP-defend  
  let b min-one-of my-bases [ distance myself ]
  if (b != nobody) [
    set heading towards b
    ;Si on est trop loin de la base à défendre on tourne de 90 afin d'avoir un mouvement circulaire autour de celle-ci ; si on est trop près on s'en éloigne
    ifelse (distance b < 7)[rt 180]
    [if (distance b < 9)[rt 90]]
    VPOP-forward-move speed
  ]
end

; Méthode donnant les instructions nécessaires à l'attaque d'une base adverse par les rocketLaunchers
to VPOP-chaaarge  
  let eBase mem1
  
  ;;Tourne autour de la base en tirant
  set heading towardsxy item 0 eBase item 1 eBase
  if (VPOP-has-arrived eBase 10)[
    launch-rocket towardsxy item 0 eBase item 1 eBase
    rt 90]
  if (VPOP-has-arrived eBase 5)[
    rt 90]
  VPOP-forward-move speed   
end

; Méthode permettant de pourchasser et tirer sur le robot ennemi visible le plus proche
to VPOP-select-target-fire-and-chase
  ;Cherche d'abord les RL ennemis (le plus proche)
  let t min-one-of perceive-specific-robots ennemy RocketLaunchers [distance myself]
  if (t != nobody)[
    launch-faf t ;;si on a un faf, on tire un faf
    launch-rocket towardsxy ([xcor] of t) ([ycor] of t);;sinon on tire un missile
    VPOP-go-toward t]
  
  ;Puis l'ennemi le plus proche
  let h min-one-of perceive-specific-robots ennemy RocketLaunchers [distance myself]
  if (h != nobody)[
    launch-faf h ;;si on a un faf, on tire un faf
    launch-rocket towardsxy ([xcor] of h) ([ycor] of h);;sinon on tire un missile
    VPOP-go-toward h]  
end 

; Méthode permettant aux explorers de report une base ennemi qu'ils ont trouvé
to VPOP-report-ennemy-base[eBase]
  if (mem2 != eBase) and (mem1 = -1)[
    set mem1 eBase]
end

; Méthode permettant aux explorers de déclaré une base ennemi comme détruite
to VPOP-report-dead-ennemy-base[eBase]
  set mem2 eBase
  if (mem1 = eBase)[
    set mem1 -1
    set mem3 1
  ]
end








to goRedExplorer                      ;mem0 : coord du tas trouvé, mem1 : coord de la base adv trouvée, mem2 : l'harvester à aider, mem3 : timer de spy de base, mem4 : timer d'aide de rl , mem5[0] : état, mem5[1] : priorité (0: tas, 1 : base adv, 2 : help)
  
  ; Permet d'éviter que l'harvester ne vienne s'encastrer dans la base
  if (distance VPOP-closest-base < 0.2)[
    VPOP-forward-move speed]
  
  
  ; Machine à état
  (ifelse
    item 0 mem5 = 0 [      
      ;SEARCH : se balade en ligne droite jusqu'à trouver une base adv, un tas, quelqu'un à aider ou retourner à la base       
      ;s'il voit un rocket launcher qui est en mode attaque, va spy la base attaquée      
      ;s'il voit + de 5 burgers en meme temps, en prend un au hasard et le désigne comme tas
      ;s'il voit une base adv, enregistre ses coord      
      ;check s'il a des coordonnées pour sa priorité -> si oui passe en état de report
      ;sinon s'il voit un harvester qui porte plus de x burgers, passe en état d'aide   
      
      
      VPOP-forward-move speed
      
      ; S'il le peut (timer mem4 fini), regarde s'il y a un rocket launcher qui a besoin d'aide pour aller espionner la base adverse (l'espionnage est le + prioritaire)
      ifelse (mem4 < 0)[
        let rls perceive-specific-robots color rocketLaunchers
        let rl one-of rls with [mem1 != -1 and mem1 != -2]
        if (rl != nobody)[
          set mem1 [mem1] of rl
          set mem5 replace-item 0 mem5 4
        ]
      ][
        set mem4 mem4 - 1
      ]      
      
      ; Regarde s'il y a un tas (plus de 4 burgers vus)
      if (count perceive-food > 4)[
        let burgerPerceived one-of perceive-food
        set mem0 replace-item 0 mem0 ([xcor] of burgerPerceived)
        set mem0 replace-item 1 mem0 ([ycor] of burgerPerceived)
      ]
      
      ; Regarde s'il y a une base adverse
      let baseAdv one-of perceive-specific-robots ennemy bases
      if (baseAdv != nobody) [
        set mem1 replace-item 0 mem1 ([xcor] of baseAdv)
        set mem1 replace-item 1 mem1 ([ycor] of baseAdv)    
      ]
      
      (ifelse
        item 1 mem5 = 0 and item 0 mem0 != -1 [         ; on a un tas et c'est notre prio -> on report
          set mem2 -1   ; Si on avait vu un harvester demandant de l'aide on l'oublie
          set mem5 replace-item 0 mem5 2
        ]
        item 1 mem5 = 1 and item 0 mem1 != -1[          ; on a une base adv et c'est notre prio -> on report
          set mem2 -1   ; Si on avait vu un harvester demandant de l'aide on l'oublie
          set mem5 replace-item 0 mem5 2  
        ][
          let harvesters-perceived perceive-specific-robots color harvesters
          let harvester-perceived one-of harvesters-perceived with [mem0 > 4000]
          if (harvester-perceived != nobody)[
            set mem2 harvester-perceived
            set mem5 replace-item 0 mem5 1
          ]
      ])    
    ]
    item 0 mem5 = 1 [  
      ;HELP : va vers l'harvester qu'il a vu
      ;quand a reçu de la nourriture retourne à la base
      
      ifelse ((mem2 != nobody) and (distance mem2 <= detection-range) and ([mem0] of mem2 > 4000))[ ; on vérifies qu'on voit toujour le harvester et qu'il a toujours besoin d'aide                                                                                             ; On s'approche du harvester à aider
        VPOP-go-toward mem2
      ]
      [
        ; Le harvester est mort/trop loin/n'a plus besoin d'aide : on l'oublie
        set mem2 -1
        ifelse (carrying-food? > 0) [
          set mem5 replace-item 0 mem5 2 ; on a des burgers sur nous -> Retour à la base
        ] [
          set mem5 replace-item 0 mem5 0 ; on n'a pas de burger sur nous -> Retour à la recherche (si on est en help c'est qu'on a rien de prioritaire à report à la base)          
        ]        
      ]
    ]
    item 0 mem5 = 2 [
      ;REPORT : retourne à la base
      ; si voit un harvester et qu'on a les coordonnées d'un tas lui transmet
      ; -> si la prio est le tas et qu'on a assez d'énergie on repart en search, sinon on continue de rentrer
      ; quand voit la base lui envoie les coordonnées => base adv : mem1; tas : mem2
      
      ;Si On est à plus de 2 de la base on se rapproche (sinon on ne pourra pas prendre de l'énergie
      if (distance VPOP-closest-base > 2)[
        VPOP-go-toward VPOP-closest-base]
      
      ;Si on a un tas en mémoire on regarde si on croise un harvester
      if (item 0 mem0 != -1) [
        let transmit 0 ;indique si on a transmis le tas ou pas (pour pouvoir l'oublier si c'est le cas)
        let hvtsPerceived perceive-specific-robots color harvesters 
        set hvtsPerceived hvtsPerceived with [mem1 = [-1 -1]]
        let harvesterPerceived one-of hvtsPerceived
        while[harvesterPerceived != nobody][
          set transmit 1
          let infoTas mem0
          ask harvesterPerceived [set mem1 infoTas]
          
          set hvtsPerceived perceive-specific-robots color harvesters 
          set hvtsPerceived hvtsPerceived with [mem1 = [-1 -1]]
          set harvesterPerceived one-of hvtsPerceived
        ]
        if (transmit = 1)[            
          set mem0 [-1 -1]                              ; l'info du tas a été transmise => on l'oublie            
          if (item 1 mem5 = 0 )[                          ; la priorité du robot est le tas
            if (energy >= 500)[   ; si l'énergie est suffisante on repart à la recherche de d'un tas
              rt 360 - random 180 ; avant de repartir on se tourne dans une direction aléatoire
              set mem5 replace-item 0 mem5 0  
            ]
          ]
        ]
      ]
      
      ;On check si on voit la base pour lui donner les informations
      let basePerceived one-of perceive-specific-robots color bases
      if (basePerceived != nobody)[
        ;on transmet les infos à la base
        let infoTas mem0
        if (infoTas != [-1 -1])[
          ask basePerceived [set mem0 infoTas]
          set mem0 [-1 -1]
        ]
        let infoBase mem1
        if(infoBase != [-1 -1])[
          ask basePerceived [VPOP-report-ennemy-base infoBase]
          set mem1 [-1 -1]]        
        
        set mem5 replace-item 0 mem5 3 ; On passe en mode IDDLE
      ]
    ]
    item 0 mem5 = 3 [
      ;IDDLE : on attend d'avoir assez d'énergie et plus de nourriture pour repartir
      ifelse (energy < 500 or carrying-food? > 0)[
        ; Si on a des choses à donner à la base mais qu'on est trop loin on s'approche, sinon on donne
        ifelse (distance VPOP-closest-base > 2)[
          VPOP-go-toward VPOP-closest-base
        ][
          give-food VPOP-closest-base carrying-food?
          VPOP-ask-for-energy 700 - energy
        ]
      ]
      [
        ; On repart en SEARCH
        set mem5 replace-item 0 mem5 0
      ] 
    ] 
    
    ;=========================================================================================================================================================================
    ;======================================================  Etats liés a l'Observation d'une Base Adverse ===================================================================
    ;=========================================================================================================================================================================
    
    item 0 mem5 = 4 [
      ; GO-SPY : Va à la base indiquée pour savoir si elle est encore en vie
      if (mem1 != [-1 -1])[ ;simple vérification que mem1 n'est pas "nulle" 
        ifelse (VPOP-has-arrived mem1 9)[
          ;Si on est arrivé on passe à l'état suivant et on initialise le timer d'espionnage mem3
          set mem3 30
          set mem5 replace-item 0 mem5 5
        ][
          ;Sinon on avance vers la base ennemie
          VPOP-go-towardxy mem1 
        ]
      ]
    ]
    item 0 mem5 = 5 [
      ; SPY : se met en retrait et va périodiquement checker si la base adv est toujours en vie. Nombre de tentative limité par mem4
      
      ; On regarde s'il y a pas déjà un explorer qui espionne la base
      let explosPerceived perceive-specific-robots color explorers 
      set explosPerceived explosPerceived with [item 0 mem5 = 5]
      let exploPerceived one-of explosPerceived
      while[exploPerceived != nobody and exploPerceived != myself][
        ; Si c'est le cas on lui dit d'arreter grâce à mem4 et mem5
        ask exploPerceived [set mem4 200]
        ask exploPerceived [set mem5 replace-item 0 mem5 0]
        
        set explosPerceived perceive-specific-robots color explorers 
        set explosPerceived explosPerceived with [item 0 mem5 = 5]
        set exploPerceived one-of explosPerceived
      ]      
      
      ; Si le timer de check mem3 est terminé
      ifelse (mem3 < 0)[
        ;Si on est à 9 de la base adverse (assez proche pour pouvoir la voir) on vérifie son existence
        ifelse (VPOP-has-arrived mem1 9)[
          let bse min-one-of perceive-specific-robots ennemy bases [distance myself]
          ; la base n'est pas morte
          ifelse (bse != nobody)[
            ;On résinitialise le timer de check
            set mem3 30 
            set mem4 mem4 + 35 ; On remonte le timer d'espionnage
            if (mem4 > 200)[ ; Si le timer d'espionnage dépasse X, ca veut dire qu'on a faire x/y (=200/35 = 5) tentatives => on abandonne l'espionnage pour ne pas coincer les explorers
              rt random 360
              set mem5 replace-item 0 mem5 0              
            ]
          ][
            ; la base est morte
            set mem5 replace-item 0 mem5 6
            set mem3 0 ; On prépare le timer de check pour la phase STOP-PSY
          ]
        ][
          ;Sinon on s'approche
          VPOP-go-towardxy mem1 
        ]
      ][
        ;Si on est est attente du timer, on s'éloigne de la base adverse si on est pas en sécurité
        if (VPOP-has-arrived mem1 15)[
          set heading towardsxy item 0 mem1 item 1 mem1
          rt 180
          VPOP-forward-move speed
        ]
        set mem3 mem3 - 1
      ]
    ]
    item 0 mem5 = 6 [
      ; STOP-SPY : L'explorer fait un tour autour de la base détruite (en sens horaire) pour indique aux Rocket launchers encore sur place d'arreter d'attaquer (qui eux tournent en sens trigo)
      
      ; On fait trouner l'explorer
      set heading towardsxy item 0 mem1 item 1 mem1
      if (VPOP-has-arrived mem1 12)[        
        rt -90]
      if (VPOP-has-arrived mem1 8)[rt -90]
      VPOP-forward-move speed  
      
      ; Si on voit un rocket launcher on lui transmet l'info
      let rlsPerceived perceive-specific-robots color rocketlaunchers 
      set rlsPerceived rlsPerceived with [mem1 != -1 and mem1 != -2]
      let rlPerceived one-of rlsPerceived
      while[rlPerceived != nobody][
        ask rlPerceived [set mem1 -1] ; le rl oublie la base ennemie => retourne défendre la base alliée la plus proche
        
        set rlsPerceived perceive-specific-robots color rocketlaunchers 
        set rlsPerceived rlsPerceived with [mem1 != -1 and mem1 != -2]
        set rlPerceived one-of rlsPerceived
      ]
      
      ; C'est mem3 qui permet de déterminer qu'on a fait un tour (environ) 
      set mem3 mem3 + 1     
      
      ;Si on a finit le tour on report la mort de l'ennemi aux bases afin qu'elle arrêtent de lancer l'assaut
      if (mem3 > 65)[
        set mem5 replace-item 0 mem5 7     
      ]
    ]
    item 0 mem5 = 7 [
      ;REPORT-SPY : Retourne à la base alliée pour lui indiquer que la basze adv est morte
      ; on dit aux harvesters qu'on voit qu'il y a un tas là-bas
      ; on dit aux rocketLaunch qui vont attaquer la base que c'est fini
      
      let rlsPerceived perceive-specific-robots color rocketlaunchers 
      set rlsPerceived rlsPerceived with [mem1 != -1 and mem1 != -2]
      let rlPerceived one-of rlsPerceived
      while[rlPerceived != nobody][
        ask rlPerceived [set mem1 -1]
        
        set rlsPerceived perceive-specific-robots color rocketlaunchers 
        set rlsPerceived rlsPerceived with [mem1 != -1 and mem1 != -2]
        set rlPerceived one-of rlsPerceived
      ]
      
      let hvtsPerceived perceive-specific-robots color harvesters 
      set hvtsPerceived hvtsPerceived with [mem1 = [-1 -1]]
      let harvesterPerceived one-of hvtsPerceived
      while[harvesterPerceived != nobody][
        let infoTas mem1
        ask harvesterPerceived [set mem1 infoTas]
        
        set hvtsPerceived perceive-specific-robots color harvesters 
        set hvtsPerceived hvtsPerceived with [mem1 = [-1 -1]]
        set harvesterPerceived one-of hvtsPerceived
      ]
      
      VPOP-go-toward VPOP-closest-base
      let bs min-one-of perceive-specific-robots color bases [distance myself]
      if (bs != nobody)[
        ; On préviens la première base que l'ennemi est détruit
        let coordBaseDestroyed mem1
        ask bs [VPOP-report-dead-ennemy-base coordBaseDestroyed] 
        
        ;On part prévenir la seconde base
        let be max-one-of my-bases [ distance myself ]
        ; Si l'autre base existe toujours
        ifelse (be != nobody and be != bs)[
          set mem4 [-1 -1] ;on change mem4 de nombre à liste
          set mem4 replace-item 0 mem4 [xcor] of be
          set mem4 replace-item 1 mem4 [ycor] of be
          set mem5 replace-item 0 mem5 7  
        ][
          ;l'explorer oublie la base adverse et repart en search
          set mem1 [-1 -1]
          set mem5 replace-item 0 mem5 0  
        ]
      ]
    ]
    item 0 mem5 = 8 [
      ;SEC-REP-SPY : On va à la seconde base pour également la prévenir qu'une base ennemie est morte
      
      VPOP-go-towardxy mem4
      let bs min-one-of perceive-specific-robots color bases [distance myself]
      (ifelse 
        bs != nobody[
          ; On préviens la première base que l'ennemi est détruit
          let coordBaseDestroyed mem1
          ask bs [VPOP-report-dead-ennemy-base coordBaseDestroyed] 
          
          ;l'explorer oublie la base adverse et repart en search
          set mem1 [-1 -1]
          set mem4 0 ; mem4 redevient un nombre
          set mem5 replace-item 0 mem5 0   
        ]
        VPOP-has-arrived mem1 3[          ;l'explorer aurait dû avoir vu la base allié : elle est surement morte entre temps...
          set mem1 [-1 -1]
          set mem4 0 ; mem4 redevient un nombre
          set mem5 replace-item 0 mem5 0 
      ])
  ])  
  
  ; ====== A FAIRE QUELQUE SOIT L'ETAT ======
  ; Si il n'y a plus d'énergie, il faut rentrer mais pas si on est déjà en demande d'énergie ou en phase d'espionnage
  if (energy < 500) [
    if (item 0 mem5 < 3)[
      set mem2 -1   ; Si on avait vu un harvester demandant de l'aide on l'oublie
      set mem5 replace-item 0 mem5 2]
  ]  
end

to goRedRocketLauncher                ;mem1 : coord de la base à attaquer ou -1 s'il n'y a pas de base à attaquer ou -2 si le rocket launcherdoit toujours rester défendre la base
  ;Si on a besoin d'énergie on va en chercher
  ifelse (energy < 1000)
  [
    ifelse (distance VPOP-closest-base > 2)[
      VPOP-go-toward VPOP-closest-base
    ][
      VPOP-ask-for-energy 4000 - energy
    ]
  ]
  [
    ; si on a une base à attaquer on va l'attaquer
    ifelse(mem1 != -1) and (mem1 != -2)[
      VPOP-chaaarge
    ]
    [
      ;sinon on défend la base en pourchassant d'abord les potentiels ennemis visibles
      VPOP-select-target-fire-and-chase
      VPOP-defend
    ]
  ]
  
  ;;Si il croise un ennemi et qu'il n'a pas tiré, tire dessus (sans engager la poursuite)
  let t min-one-of perceive-specific-robots ennemy RocketLaunchers [distance myself];;Cherche d'abord les RL ennemis (le plus proche)
  if (t != nobody)[
    launch-faf t ;;si on a un faf, on tire un faf
    launch-rocket towardsxy ([xcor] of t) ([ycor] of t);;sinon on tire un missile
  ]  
  let h min-one-of perceive-specific-robots ennemy RocketLaunchers [distance myself];;Puis l'ennemi le plus proche)
  if (h != nobody)[
    launch-faf h ;;si on a un faf, on tire un faf
    launch-rocket towardsxy ([xcor] of h) ([ycor] of h);;sinon on tire un missile
  ]
  
  ;; crée un nouveau missile si plus de 1000 unités d'énergie
  if ((energy > 1000) and (nb-missiles < 5)) [ new-missile 1 ]
end

to goRedHarvester                   ;mem0 = carrying-food?, mem1 = coord tas, mem2 = timer récolte, mem3 = timer plantation, mem4 = limite de burger à ne pas planter, mem5[0] = etat du robot, mem5[1] = sous-etat du robot
  (ifelse
    ; RECHERCHE-ET-RECOLTE
    item 0 mem5 = 0 [
      (ifelse
        item 1 mem5 = 0 [ 
          ;WANDER : se balade aléatoirement
          ;si a des coordonnées d'un tas -> passe à l'état de go vers le tas
          ;ou si on voit un burger on passe en récolte
          
          ;si voit un burger on passe à l'état de récolte
          let burg one-of perceive-food
          if (burg != nobody) [            
            VPOP-go-toward burg
            set mem5 replace-item 1 mem5 2
            set mem2 30 ;30 est la durée pendant laquelle il va chercher de la nourriture en mode récolte (réinitialisée à chaque burger récolté)
          ]
          
          ;on laisse l'harvester se balader aléatoirement et librement tant qu'il reste à moins de 35 de la base
          ifelse(distance VPOP-closest-base < 35)[
            random-move
          ][
            VPOP-go-toward VPOP-closest-base
          ]
          
          ;on regarde si on a reçu les coordonnées d'un tas auquel cas on va le récupérer
          if (item 0 mem1 != -1) [
            set mem5 replace-item 1 mem5 1
          ]      
        ]
        item 1 mem5 = 1 [   
          ;GO-TO-BURGER : avance vers les coordonnées de tas qu'il a enregistré
          VPOP-go-towardxy mem1
          
          ;si arrivé aux coordonnées : passe en etat de récolte
          if (VPOP-has-arrived mem1 2)[
            set mem1 [-1 -1]  ;on oublie le tas
            set mem2 30
            set mem5 replace-item 1 mem5 2
          ]
        ]
        item 1 mem5 = 2 [  
          ;RECOLTE : Recupere tout les burgers a portée
          ;Pour ça on le fait ramasser tous les burgers à porté, puis se déplacer vers les burgers visibles mais non atteignables ou de façon aléatoire
          ;pendant un timer mem2 réinitialisé à chaque rammassage de burger
          
          ;On prend tous les burgers visibles
          let burgerPerceived min-one-of perceive-food [ distance myself ]
          while [(burgerPerceived != nobody) and (distance burgerPerceived <= 2)] [
            take-food burgerPerceived
            set burgerPerceived min-one-of perceive-food [ distance myself ]
            set mem2 30 ;si on a récupéré un burger on reset le timer 
          ]
          
          ;Se dirige vers un burger hors de portée pour pouvoir le récupérer au prochain tick ou aléatoirement si on n'en voit pas
          ifelse (burgerPerceived != nobody)[
            VPOP-go-toward burgerPerceived
          ][
            random-move
          ]
          
          ;On décrémente le timer
          set mem2 (mem2 - 1)
          ;A la fin du timer on passe au sur-état de retour à la base
          if (mem2 < 0 or carrying-food? > 15000)[
            set mem5 [1 0]
            ;On détermine le minimum de burgers à garder lorsqu'on fait des plantations
            set mem4 (carrying-food? * 0.3)
          ]        
      ])
    ]
    item 0 mem5 = 1 [   
      ;RETOUR : Etat dans lequel l'harvester va retourner à la base
      ; si la distance à la base est < X planter un burger si possible avant d'avancer, si impossible essayer en se décalant plusieurs fois sur le côté
      ; l'harvester plantera de facon à toujours garder un minimum de burger à donner à la base
      ; si voit un explorer et que l'harvester a Carrying-food? > Y, donner le surplus à l'explorer
      
      ;Si on voit des burgers sur le chemin du retour on les prend
      ;mais sans passer en mode récolte et donc sans se détourner
      let burgerPerceived min-one-of perceive-food [ distance myself ]
      while [(burgerPerceived != nobody) and (distance burgerPerceived <= 2)] [
        take-food burgerPerceived
        set burgerPerceived min-one-of perceive-food [ distance myself ]
      ]
      
      ;Si on est arrivé dans la zone de plantation autour de la base (15 autour de base - périmètre où tournent les rocket launchers en défense)
      let closest-base VPOP-closest-base
      ifelse (distance closest-base < 8 or (distance closest-base < 15 and distance closest-base > 11)) [
        ;Si on manque d'énergie on en demande
        if (energy < 500)[          
          VPOP-ask-for-energy 1700
        ]
        
        ;On essaie de planter :
        ;On compte le nombre de graine ici
        let nb-seeds count Seeds-here
        ifelse (nb-seeds > 0)[
          ;si il y a déjà une plantation sur le patch, on va essayer le patch à coté puis abandonner après 50 essais jusqu'à pouvoir à nouveau planter
          ifelse (mem3 > 50)[
            ;n'arrive pas à planter : abandon, il faut avancer
            VPOP-go-toward closest-base            
          ][
            ;on peut pas planter là mais c'est trop tôt pour abandonner : on tourne autour de la base en comptabilisant cette tentative
            set heading towards closest-base
            rt 90
            VPOP-forward-move speed
            set mem3 mem3 + 1
          ]
        ][
          ;Si on peut planter on le fait à condition de garder un minimum de burgers (mem4)
          set mem3 0
          if (carrying-food? > mem4)[
            plant-seeds color max-seeds
          ] 
          VPOP-go-toward closest-base
        ]
        
        ;S'il nous reste des burgers on essaie de les donner à la base, et si on n'a plus de burger on repart
        ;(si on n'a pas assez d'énergie on retournera nec dans cet état qui nous rapproche de la base)
        ifelse (carrying-food? > 0) [
          let basePerceived one-of perceive-specific-robots color bases
          if (basePerceived != nobody) [
            give-food basePerceived carrying-food?
          ]
        ][
          set mem5 replace-item 0 mem5 0
        ]        
      ][
        ;Si on est hors de la zone de plantation on se rapproche de la base
        VPOP-go-toward closest-base
      ]     
  ])
  
  
  ; ====== A FAIRE QUELQUE SOIT L'ETAT ======
  
  ;Si on a un surplus de burger, on regarde si on a un explorer à qui les donner
  if (carrying-food? > 4000) [ ; 4000 designe la quantité de burgers que l'harvester va garder pour pouvoir les planter
    let explorerPerceived one-of perceive-specific-robots color explorers
    if (explorerPerceived != nobody) [
      give-food explorerPerceived (carrying-food? - 4000)
    ]
  ]   
  
  ;Si il y a un mur devant on le recupére pour liberer le passage
  let wallPerceived one-of perceive-walls
  if (wallPerceived != nobody)[
    take-wall wallPerceived
  ]
  
  ;Si on manque d'énergie on retourne à la base
  if (energy < 500) [
    set mem4 (carrying-food? * 0.3)
    set mem5 replace-item 0 mem5 1
  ]
  
  ;on expose la quantité de burgers portés
  set mem0 carrying-food?
end

to goRedBase
  ;set label energy
  
  ;;Transmet l'info de tas à un harvester
  let infoTas mem0
  if (infoTas != [-1 -1])[
    let t one-of perceive-specific-robots color harvesters
    ifelse (t != nobody)[
      ask t [set mem1 infoTas]
      set mem0 [-1 -1]]
    [if (energy > 15000)[
      new-Harvester self
      let t2 one-of perceive-specific-robots color harvesters
      ask t2 [set mem1 infoTas]
      set mem0 [-1 -1]
      ]
    ]
  ]
  
  ;;Detecte les tas et transmet l'info
  if (count perceive-food > 10)[
    let burgerPerceived one-of perceive-food
    let burgerPerceivedxy [-1 -1]
    set burgerPerceivedxy replace-item 0 burgerPerceivedxy ([xcor] of burgerPerceived)
    set burgerPerceivedxy replace-item 1 burgerPerceivedxy ([ycor] of burgerPerceived)
    
    let t one-of perceive-specific-robots color harvesters
    ifelse (t != nobody)[
      ask t [set mem1 burgerPerceivedxy]
    ]
    [if (energy > 15000)[
      new-Harvester self
      let t2 one-of perceive-specific-robots color harvesters
      ask t2 [set mem1 burgerPerceivedxy]
      ]
    ]
  ]
  
  ;;Transmet l'info de base ennemie aux RL
  let infoBase mem1
  if (infoBase != -1)[
    ;set mem7 3;; !!! Cette ligne force la base a ne produire QUE des RL dès qu'on a les coordonées de la base ennemie (passage en mode attaque) !!!  
    let RocketLaunchersPerceived perceive-specific-robots color rocketlaunchers 
    set RocketLaunchersPerceived RocketLaunchersPerceived with [mem1 = -1]
    let RocketLauncherPerceived one-of RocketLaunchersPerceived
    while[RocketLauncherPerceived != nobody][
      ask RocketLauncherPerceived [set mem1 infoBase]
      set RocketLaunchersPerceived perceive-specific-robots color rocketlaunchers 
      set RocketLaunchersPerceived RocketLaunchersPerceived with [mem1 = -1]
      set RocketLauncherPerceived one-of RocketLaunchersPerceived
    ]
  ]
  
  
  
  
  ;;Créé les robots 1 par 1
  if (mem6 > 0) and (energy > 15000) [
    ifelse(one-of perceive-specific-robots color rocketlaunchers != nobody)[
      let increase-rl-production 0
      if (mem1 != -1)[set increase-rl-production 7]
      (ifelse
        mem7 < mem3 [;; nombre de harvester par RL/explo
          if(count perceive-specific-robots color harvesters < 20)[
            new-Harvester self
        ]]
        mem7 = mem3[  
          if(count perceive-specific-robots color explorers < 7)[
                        new-Explorer self
            set mem4 mem4 + 1
            if (mem4 > 3)[
              ask one-of perceive-specific-robots color explorers [set mem5 [0 1]]
              set mem4 0
        ]]]
        mem7 < mem3 + 1 + increase-rl-production[      
          new-RocketLauncher self
        ]
        mem7 = mem3 + 1 + increase-rl-production[;dernier RL du cycle      
          new-RocketLauncher self
          set mem6 mem6 - 1
          set mem7 -1 ])
      set mem7 mem7 + 1 ]
    [;Si il n'y a pas de RL en defense, on en créé un qui restera en def
      new-RocketLauncher self
      ask one-of perceive-specific-robots color rocketlaunchers [set mem1 -2]]
  ]
  
  
  if (nb-missiles < 10) and (energy > 1000) [ new-missile 50 ]
  if (nb-fafs < 10) and (energy > 1000) [ new-faf 10 ]
  
  
  ;;Tire sur les ennemis proches
  let tries 0
  let t one-of perceive-robots ennemy
  while[tries < 10 and t != nobody][
    ;; regarde s'il y a des alliés en direction de la cible potentielle t avant de tirer
    ifelse (not any? perceive-robots-in-cone color towards t) [ 
      launch-faf t 
      set tries 10
    ]
    [if (distance min-one-of perceive-robots-in-cone color towards t [distance myself] > distance t)[
      launch-faf t
      set tries 10
      ]
    ]
    set t one-of perceive-robots ennemy
    set tries tries + 1
  ]  
end


;; procedure pour initialiser les explorers rouges
to initRedExplorer
  set mem0 [-1 -1]  ; emplacement des coordonnées du tas trouvé
  set mem1 [-1 -1]  ; emplacement des coordonnées de la base ennemie trouvée ou espionnée
  set mem2 -1       ; reference de l'harvester à aider
  set mem3 -1       ; timer de check spy et timer de stop-spy
  ;mem4             ; timer d'aide spy et coordonnées de la seconde base à laquelle il faut reporter la destruction de l'ennemi
  set mem5 [0 0]    ; état [0] et priorité [1] de l'explorer
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
  set mem1 -1       ; -1 -> en attente d'ordre; -2 -> toujours en defense; [x y] -> coordonées de la base ennemie
end

;; procedure pour initialiser les harvesters rouges
to initRedHarvester
  ;mem0             ; permet d'exposer carrying-food?
  set mem1 [-1 -1]  ; coordonnées du tas à récupérer
  ;mem2             ; timer de récolte
  ;mem3             ; timer de plantation
  ;mem4             ; limite de burger à garder pour la base lorsqu'on plante
  set mem5 [0 0]
end

;; procedure pour initialiser les bases rouges
to initRedBase
  set mem0 [-1 -1]  ;coordonées d'un tas
  set mem1 -1       ;coordonées de la base ennemie
  set mem2 -1       ;coordonées de la base ennemie detruite
  set mem3 7
  set mem6 99       ;nombre d'harvesters a produire ? a suprimer
  set mem7 0        ;ordre de production des robots (0,1 -> Harvester; 2 -> Explorer; 3 -> RocketLauncher)
end
